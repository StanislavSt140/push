package com.example.push.ui.screens


import android.graphics.Color.alpha
import android.util.Log
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.snapping.rememberSnapFlingBehavior
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Shadow
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import coil.compose.rememberAsyncImagePainter
import com.example.push.data.NewsItem
import com.example.push.data.RetrofitClient
import com.example.push.navigation.Screen
import com.example.push.ui.components.AppHeader
import kotlinx.coroutines.launch

@Composable
fun MainScreen(navController: NavController) {
    AppHeader(navController, "–ì–æ–ª–æ–≤–Ω–∞") {
        val newsList = remember { mutableStateOf(emptyList<NewsItem>()) }
        val scope = rememberCoroutineScope()

        LaunchedEffect(Unit) {
            scope.launch {
                try {
                    val response = RetrofitClient.api.getNews()
                    if (response.status == "success") {
                        newsList.value = response.news ?: emptyList()
                    } else {
                        Log.d("MainScreen", "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω!")
                    }
                } catch (e: Exception) {
                    Log.d("MainScreen", "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: ${e.message}")
                }
            }
        }


        LazyColumn(
            modifier = Modifier.fillMaxSize().padding(top = 86.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp) // ‚¨Ö –î–æ–¥–∞—î –≤—ñ–¥—Å—Ç—É–ø–∏ –º—ñ–∂ –±–ª–æ–∫–∞–º–∏
        ) {
            item {
                ImageSlider(
                    images = listOf(
                        "https://cdn.pixabay.com/photo/2023/09/23/14/22/dahlia-8271071_640.jpg",
                        "https://img.freepik.com/free-vector/key-bunch-with-keychain-metal-ring_107791-626.jpg",
                        "https://ukrasheniya.com.ua/image/cache/catalog/sites/default/files/content/tovar/tovar-gallery/braslety-iz-natyralnogo-kamnya-ukraina-magazin-akvamarin-gorniyxryctal-agat-biruza-2-600x600.jpg",
                        "https://img.freepik.com/free-vector/key-bunch-with-keychain-metal-ring_107791-626.jpg"
                    )
                )
            }

            item { NewsSection(newsList.value, navController) }

            item { SchoolAdvantagesSection() } // ‚¨Ö –¢–µ–ø–µ—Ä –≤—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å–∫—Ä–æ–ª–∏—Ç—å—Å—è –≤–Ω–∏–∑!
        }

    }
}

@Composable
fun ImageSlider(images: List<String>) {
    val pagerState = rememberPagerState(pageCount = { images.size })

    Box(modifier = Modifier.fillMaxWidth().height(250.dp)) {
        HorizontalPager(
            state = pagerState,
            modifier = Modifier.fillMaxSize()
        ) { page ->
            Image(
                painter = rememberAsyncImagePainter(images[page]),
                contentDescription = "–°–ª–∞–π–¥–µ—Ä",
                modifier = Modifier.fillMaxSize(),
                contentScale = ContentScale.Crop
            )
        }

        // üîπ –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ (–ù–∞–∑–∞–¥ —ñ –í–ø–µ—Ä–µ–¥)
        val coroutineScope = rememberCoroutineScope() // ‚¨Ö –ó–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É—î–º–æ –∫–æ—Ä—É—Ç–∏–Ω—É
        IconButton(
            onClick = {
                coroutineScope.launch {
                    pagerState.animateScrollToPage((pagerState.currentPage - 1).coerceAtLeast(0))
                }
            },
            modifier = Modifier
                .align(Alignment.CenterStart)
                .padding(16.dp)
                .background(Color.Black.copy(alpha = 0.5f), shape = CircleShape) // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
        ) {
            Icon(
                imageVector = Icons.Filled.ArrowBack,
                contentDescription = "–ù–∞–∑–∞–¥",
                tint = Color.White
            )
        }

        IconButton(
            onClick = {
                coroutineScope.launch {
                    pagerState.animateScrollToPage((pagerState.currentPage + 1).coerceAtMost(images.size - 1))
                }
            },
            modifier = Modifier
                .align(Alignment.CenterEnd)
                .padding(16.dp)
                .background(Color.Black.copy(alpha = 0.5f), shape = CircleShape) // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
        ) {
            Icon(
                imageVector = Icons.Filled.ArrowForward,
                contentDescription = "–í–ø–µ—Ä–µ–¥",
                tint = Color.White
            )
        }
        // üîπ –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        Row(
            modifier = Modifier.align(Alignment.BottomCenter).padding(bottom = 12.dp),
            horizontalArrangement = Arrangement.Center
        ) {
            repeat(images.size) { index ->
                Box(
                    modifier = Modifier
                        .size(if (pagerState.currentPage == index) 10.dp else 8.dp)
                        .background(if (pagerState.currentPage == index) Color.White else Color.Gray, CircleShape)
                        .padding(horizontal = 4.dp)
                )
            }
        }
    }
}

@Composable
fun NewsSection(newsList: List<NewsItem>, navController: NavController) {
    val isVisible = remember { mutableStateOf(true) }

    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background( // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≥—Ä–∞–¥—ñ—î–Ω—Ç, –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ–ª—å–æ—Ä—É
                    Brush.linearGradient(
                        colors = listOf(Color.Magenta, Color.Cyan)
                    ),
                    shape = RoundedCornerShape(16.dp) // ‚¨Ö –°–∫—Ä—É–≥–ª–µ–Ω—ñ –∫—É—Ç–∏ –∑–∞–ª–∏—à–∞—î–º–æ
                )
                .padding(vertical = 5.dp)
        ) {
            Text(
                text = "üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏",
                style = MaterialTheme.typography.headlineLarge.copy(
                    fontSize = 20.sp, // ‚¨Ö –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É
                    fontWeight = FontWeight.Bold, // ‚¨Ö –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∂–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç
                    shadow = Shadow( // ‚¨Ö –î–æ–¥–∞—î–º–æ —Ç—ñ–Ω—å
                        color = Color.Black.copy(alpha = 0.5f), // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∞ —Ç—ñ–Ω—å
                        offset = Offset(4f, 4f), // ‚¨Ö –ó–º—ñ—â–µ–Ω–Ω—è —Ç—ñ–Ω—ñ
                        blurRadius = 8f // ‚¨Ö –†–æ–∑–º–∏—Ç—Ç—è —Ç—ñ–Ω—ñ
                    )
                ),
                color = Color(0xFFFFFFFF),
                modifier = Modifier.align(Alignment.Center),
                textAlign = TextAlign.Center
            )
        }

        Spacer(modifier = Modifier.height(12.dp))

        AnimatedVisibility(visible = isVisible.value) {
            NewsHorizontalScroll(newsList, navController)
        }

    }
}



@Composable
fun NewsHorizontalScroll(newsList: List<NewsItem>, navController: NavController) {
    val lazyListState = rememberLazyListState() // ‚¨Ö –û–≥–æ–ª–æ—à—É—î–º–æ `LazyListState`

    LazyRow(
        modifier = Modifier.fillMaxWidth(),
        state = lazyListState,
        flingBehavior = rememberSnapFlingBehavior(lazyListState)
    ) {
        itemsIndexed(newsList) { index, news ->
            Card(
                modifier = Modifier
                    .padding(8.dp)
                    .width(280.dp)
                    .clickable { navController.navigate(Screen.NewsDetail.createRoute(news.id)) },
                shape = RoundedCornerShape(16.dp), // ‚¨Ö –ó–∞–∫—Ä—É–≥–ª—é—î–º–æ –∫–∞—Ä—Ç–∫—É
                colors = CardDefaults.cardColors(containerColor = Color.Transparent) // ‚¨Ö –†–æ–±–∏–º–æ —Ñ–æ–Ω –ø—Ä–æ–∑–æ—Ä–∏–º
            ) {
                Box(
                    modifier = Modifier
                        .background(
                            Brush.linearGradient(colors = listOf(Color.Magenta, Color.Cyan)), // ‚¨Ö –ì—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π —Ñ–æ–Ω —è–∫ —É –∑–∞–≥–æ–ª–æ–≤–∫—É
                            shape = RoundedCornerShape(16.dp)
                        )
                        .padding(16.dp)
                ) {
                    Column {
                        if (news.imageUrl.isNotEmpty()) {
                            Image(
                                painter = rememberAsyncImagePainter(news.imageUrl),
                                contentDescription = "–ù–æ–≤–∏–Ω–∞",
                                modifier = Modifier.height(140.dp).fillMaxWidth(),
                                contentScale = ContentScale.Crop
                            )
                        } else {
                            Box(
                                modifier = Modifier.height(140.dp).fillMaxWidth(),
                                contentAlignment = Alignment.Center
                            ) {
                                Text("–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î", style = MaterialTheme.typography.bodyMedium, color = Color.White)
                            }
                        }
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(news.title, style = MaterialTheme.typography.titleMedium, color = Color.White)

                        Spacer(modifier = Modifier.height(8.dp))
                        Button(
                            onClick = { navController.navigate(Screen.NewsDetail.createRoute(news.id)) },
                            shape = RoundedCornerShape(50),
                            colors = ButtonDefaults.buttonColors(containerColor = Color.White.copy(alpha = 0.2f)) // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∞ –∫–Ω–æ–ø–∫–∞
                        ) {
                            Text("–î–æ–∫–ª–∞–¥–Ω—ñ—à–µ", style = MaterialTheme.typography.labelLarge, color = Color.White)
                            Spacer(modifier = Modifier.width(8.dp))
                            Icon(imageVector = Icons.Filled.ArrowForward, contentDescription = null, tint = Color.White)
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun SchoolAdvantagesSection() {
    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    Brush.linearGradient(
                        colors = listOf(Color.Magenta, Color.Cyan)
                    ),
                    shape = RoundedCornerShape(16.dp)
                )
                .padding(vertical = 5.dp)
        ) {
            Text(
                text = "üéì –ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞—à–æ—ó —à–∫–æ–ª–∏",
                style = MaterialTheme.typography.headlineLarge.copy(
                    fontSize = 20.sp, // ‚¨Ö –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É
                    fontWeight = FontWeight.Bold, // ‚¨Ö –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∂–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç
                    shadow = Shadow( // ‚¨Ö –î–æ–¥–∞—î–º–æ —Ç—ñ–Ω—å
                        color = Color.Black.copy(alpha = 0.5f), // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∞ —Ç—ñ–Ω—å
                        offset = Offset(4f, 4f), // ‚¨Ö –ó–º—ñ—â–µ–Ω–Ω—è —Ç—ñ–Ω—ñ
                        blurRadius = 8f // ‚¨Ö –†–æ–∑–º–∏—Ç—Ç—è —Ç—ñ–Ω—ñ
                    )
                ),
                color = Color.White,
                modifier = Modifier.align(Alignment.Center),
                textAlign = TextAlign.Center
            )
        }

        Spacer(modifier = Modifier.height(12.dp))

        val advantages = listOf(
            "‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∞, —Å–µ—Ä–µ–¥–Ω—è —ñ —Å—Ç–∞—Ä—à–∞ —à–∫–æ–ª–∞",
            "üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ",
            "üë©‚Äçüéì –î–æ 15 —É—á–Ω—ñ–≤ —É –∫–ª–∞—Å–∞—Ö",
            "üè´ –°—É—á–∞—Å–Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–∞ –±–∞–∑–∞",
            "üåç –ë—ñ–ª—ñ–Ω–≥–≤–∞–ª—å–Ω–∞ –æ—Å–≤—ñ—Ç–∞",
            "üå≥ –ü—Ä–æ—Å—Ç–æ—Ä–∏–π –∫–∞–º–ø—É—Å",
            "üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å—å–∫–∞ —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏",
            "üçΩ –ó–¥–æ—Ä–æ–≤–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è",
            "üé≠ –ü–æ–∑–∞—à–∫—ñ–ª—å–Ω–µ –∂–∏—Ç—Ç—è",
            "üìû –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –±–∞—Ç—å–∫–∞–º–∏"
        )

        Box(modifier = Modifier.fillMaxWidth().height(700.dp)) {
            LazyVerticalGrid(
                columns = GridCells.Fixed(2),
                modifier = Modifier.fillMaxWidth()
            ) {
                items(advantages.size) { index ->
                    val advantage = advantages[index]

                    Box(
                        modifier = Modifier
                            .padding(12.dp)
                            .offset(y = if (index % 2 == 0) 0.dp else 20.dp)
                            .rotate(if (index % 2 == 0) -10f else 10f)
                            .background(
                                Brush.linearGradient( // ‚¨Ö –ì—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
                                    colors = listOf(Color.Magenta, Color.Cyan)
                                ),
                                shape = RoundedCornerShape(50.dp)
                            )
                            .padding(16.dp)
                    ) {
                        Text(
                            text = advantage,
                            style = MaterialTheme.typography.bodyLarge.copy(
                                color = Color.White,
                                shadow = Shadow( // ‚¨Ö –î–æ–¥–∞—î–º–æ —Ç—ñ–Ω—å
                                    color = Color.Black.copy(alpha = 0.5f), // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∞ —Ç—ñ–Ω—å
                                    offset = Offset(4f, 4f), // ‚¨Ö –ó–º—ñ—â–µ–Ω–Ω—è —Ç—ñ–Ω—ñ
                                    blurRadius = 8f // ‚¨Ö –†–æ–∑–º–∏—Ç—Ç—è —Ç—ñ–Ω—ñ
                                )
                            ),
                            textAlign = TextAlign.Center
                        )
                    }
                }
            }
        }
    }
    FoundersSection()
}
data class Founder(val name: String, val description: String, val imageUrl: String) // ‚¨Ö –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –ø–æ–ª–µ —ñ—Å–Ω—É—î
@Composable
fun FoundersSection() {
    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    Brush.linearGradient(
                        colors = listOf(Color.Magenta, Color.Cyan)
                    ),
                    shape = RoundedCornerShape(16.dp)
                )
                .padding(vertical = 5.dp)
        ) {
            Text(
                text = "üë©‚Äçüè´ –ó–∞—Å–Ω–æ–≤–Ω–∏–∫–∏ —à–∫–æ–ª–∏ PUSH",
                style = MaterialTheme.typography.headlineLarge.copy(
                    fontSize = 20.sp, // ‚¨Ö –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É
                    fontWeight = FontWeight.Bold, // ‚¨Ö –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∂–∏—Ä–Ω–∏–π —à—Ä–∏—Ñ—Ç
                    shadow = Shadow( // ‚¨Ö –î–æ–¥–∞—î–º–æ —Ç—ñ–Ω—å
                        color = Color.Black.copy(alpha = 0.5f), // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∞ —Ç—ñ–Ω—å
                        offset = Offset(4f, 4f), // ‚¨Ö –ó–º—ñ—â–µ–Ω–Ω—è —Ç—ñ–Ω—ñ
                        blurRadius = 8f // ‚¨Ö –†–æ–∑–º–∏—Ç—Ç—è —Ç—ñ–Ω—ñ
                    )
                ),
                color = Color.White,
                modifier = Modifier.align(Alignment.Center),
                textAlign = TextAlign.Center
            )
        }

        Spacer(modifier = Modifier.height(12.dp))

        val founders = listOf(
            Founder(
                name = "–ö–æ–≤–∞–ª—å—á—É–∫ –û–ª–µ—Å—è –í–∞–ª–µ—Ä—ñ—ó–≤–Ω–∞",
                description = "–õ—é–±–ª—é –ø–æ–¥–æ—Ä–æ–∂—ñ —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è. –®–∫–æ–ª–∞ –º–∞—î –±—É—Ç–∏ –º—ñ—Å—Ü–µ–º, –¥–µ —É—á–µ–Ω—å –º–æ–∂–µ –≤—ñ–ª—å–Ω–æ –≤–∏—Å–ª–æ–≤–ª—é–≤–∞—Ç–∏ —Å–≤–æ—ó –¥—É–º–∫–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.",
                imageUrl = "https://push-school.com/wp-content/uploads/2020/08/img_ph_Kovalchuk.png"
            ),
            Founder(
                name = "–Ü–≤–∞–Ω–æ–≤–∞ –ì–∞–Ω–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞",
                description = "–•–æ—á—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ —à–∫–æ–ª—É –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–æ—é –æ—Å–≤—ñ—Ç–æ—é, –¥–µ —î Positive learning atmosphere, Support –≤—ñ–¥ –≤—á–∏—Ç–µ–ª—ñ–≤ —ñ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –±—É—Ç–∏ High achiever!",
                imageUrl = "https://push-school.com/wp-content/uploads/2020/08/img_ph_Ivanova.png"
            ),
            Founder(
                name = "–í–∞—Å–µ–Ω–∫–æ –ê–Ω–Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∞",
                description = "–ù–∞–≤—á–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –∑–æ–Ω—ñ—î—é —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤ –¥—ñ—Ç–µ–π. –ú–∏ –ø—Ä–∞–≥–Ω–µ–º–æ –≥–∞—Ä–º–æ–Ω—ñ–π–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É —Ç–∞ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –≤ —Å–∏–ª–∞—Ö –¥–ª—è —É—Å–ø—ñ—Ö—É!",
                imageUrl = "https://push-school.com/wp-content/uploads/2020/08/img_ph_Vasenko.png"
            )
        )

        LazyRow(modifier = Modifier.fillMaxWidth()) {
            itemsIndexed(founders) { index,founder -> // ‚¨Ö –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `items(founders)`, –∞ –Ω–µ `items(founders.size)`
                Card(
                    modifier = Modifier.padding(8.dp).width(250.dp),
                    shape = RoundedCornerShape(20.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = Color.Transparent
                    )
                ) {
                    Box(
                        modifier = Modifier
                            .background(
                                Brush.linearGradient(
                                    colors = listOf(Color.Magenta, Color.Cyan)
                                ),
                                shape = RoundedCornerShape(20.dp)
                            )
                            .padding(16.dp)
                            .height(200.dp)
                    ) {
                        Column(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Image(
                                painter = rememberAsyncImagePainter(founder.imageUrl),
                                contentDescription = "–§–æ—Ç–æ ${founder.name}",
                                modifier = Modifier
                                    .size(100.dp)
                                    .clip(CircleShape)
                                    .background(MaterialTheme.colorScheme.primary.copy(alpha = 0.7f))
                            )

                            Spacer(modifier = Modifier.height(8.dp))

                            Text(
                                founder.name,
                                style = MaterialTheme.typography.titleMedium.copy(
                                    shadow = Shadow( // ‚¨Ö –î–æ–¥–∞—î–º–æ —Ç—ñ–Ω—å
                                        color = Color.Black.copy(alpha = 0.5f), // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∞ —Ç—ñ–Ω—å
                                        offset = Offset(4f, 4f), // ‚¨Ö –ó–º—ñ—â–µ–Ω–Ω—è —Ç—ñ–Ω—ñ
                                        blurRadius = 8f // ‚¨Ö –†–æ–∑–º–∏—Ç—Ç—è —Ç—ñ–Ω—ñ
                                    ),
                                    fontWeight = FontWeight.Bold
                                ),
                                textAlign = TextAlign.Center,
                                color = Color.White

                            )
                            Text(founder.description,
                                style = MaterialTheme.typography.bodySmall.copy(
                                    shadow = Shadow( // ‚¨Ö –î–æ–¥–∞—î–º–æ —Ç—ñ–Ω—å
                                        color = Color.Black.copy(alpha = 0.5f), // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∞ —Ç—ñ–Ω—å
                                        offset = Offset(4f, 4f), // ‚¨Ö –ó–º—ñ—â–µ–Ω–Ω—è —Ç—ñ–Ω—ñ
                                        blurRadius = 8f // ‚¨Ö –†–æ–∑–º–∏—Ç—Ç—è —Ç—ñ–Ω—ñ
                                    )
                                ),
                                textAlign = TextAlign.Center,
                                color = Color.White
                            )
                        }
                    }
                }
            }
        }
    }
}


















