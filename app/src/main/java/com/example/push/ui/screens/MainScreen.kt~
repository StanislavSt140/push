package com.example.push.ui.screens


import android.graphics.Color.alpha
import android.util.Log
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.snapping.rememberSnapFlingBehavior
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material.icons.filled.Info
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Shadow
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import coil.compose.rememberAsyncImagePainter
import com.example.push.data.NewsItem
import com.example.push.data.RetrofitClient
import com.example.push.navigation.Screen
import com.example.push.ui.components.AppHeader
import kotlinx.coroutines.launch

@Composable
fun MainScreen(navController: NavController) {
    AppHeader(navController, "–ì–æ–ª–æ–≤–Ω–∞") {
        val newsList = remember { mutableStateOf(emptyList<NewsItem>()) }
        val scope = rememberCoroutineScope()

        LaunchedEffect(Unit) {
            scope.launch {
                try {
                    val response = RetrofitClient.api.getNews()
                    if (response.status == "success") {
                        newsList.value = response.news ?: emptyList()
                    } else {
                        Log.d("MainScreen", "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω!")
                    }
                } catch (e: Exception) {
                    Log.d("MainScreen", "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: ${e.message}")
                }
            }
        }


        LazyColumn(
            modifier = Modifier.fillMaxSize().padding(top = 86.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp) // ‚¨Ö –î–æ–¥–∞—î –≤—ñ–¥—Å—Ç—É–ø–∏ –º—ñ–∂ –±–ª–æ–∫–∞–º–∏
        ) {
            item {
                ImageSlider(
                    images = listOf(
                        "https://cdn.pixabay.com/photo/2023/09/23/14/22/dahlia-8271071_640.jpg",
                        "https://img.freepik.com/free-vector/key-bunch-with-keychain-metal-ring_107791-626.jpg",
                        "https://ukrasheniya.com.ua/image/cache/catalog/sites/default/files/content/tovar/tovar-gallery/braslety-iz-natyralnogo-kamnya-ukraina-magazin-akvamarin-gorniyxryctal-agat-biruza-2-600x600.jpg",
                        "https://img.freepik.com/free-vector/key-bunch-with-keychain-metal-ring_107791-626.jpg"
                    )
                )
            }

            item { NewsSection(newsList.value, navController) }

            item { SchoolAdvantagesSection() } // ‚¨Ö –¢–µ–ø–µ—Ä –≤—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å–∫—Ä–æ–ª–∏—Ç—å—Å—è –≤–Ω–∏–∑!
        }

    }
}

@Composable
fun ImageSlider(images: List<String>) {
    val pagerState = rememberPagerState(pageCount = { images.size })

    Box(modifier = Modifier.fillMaxWidth().height(250.dp)) {
        HorizontalPager(
            state = pagerState,
            modifier = Modifier.fillMaxSize()
        ) { page ->
            Image(
                painter = rememberAsyncImagePainter(images[page]),
                contentDescription = "–°–ª–∞–π–¥–µ—Ä",
                modifier = Modifier.fillMaxSize(),
                contentScale = ContentScale.Crop
            )
        }

        // üîπ –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏ (–ù–∞–∑–∞–¥ —ñ –í–ø–µ—Ä–µ–¥)
        val coroutineScope = rememberCoroutineScope() // ‚¨Ö –ó–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É—î–º–æ –∫–æ—Ä—É—Ç–∏–Ω—É
        IconButton(
            onClick = {
                coroutineScope.launch {
                    pagerState.animateScrollToPage((pagerState.currentPage - 1).coerceAtLeast(0))
                }
            },
            modifier = Modifier
                .align(Alignment.CenterStart)
                .padding(16.dp)
                .background(Color.Black.copy(alpha = 0.5f), shape = CircleShape) // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
        ) {
            Icon(
                imageVector = Icons.Filled.ArrowBack,
                contentDescription = "–ù–∞–∑–∞–¥",
                tint = Color.White
            )
        }

        IconButton(
            onClick = {
                coroutineScope.launch {
                    pagerState.animateScrollToPage((pagerState.currentPage + 1).coerceAtMost(images.size - 1))
                }
            },
            modifier = Modifier
                .align(Alignment.CenterEnd)
                .padding(16.dp)
                .background(Color.Black.copy(alpha = 0.5f), shape = CircleShape) // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω
        ) {
            Icon(
                imageVector = Icons.Filled.ArrowForward,
                contentDescription = "–í–ø–µ—Ä–µ–¥",
                tint = Color.White
            )
        }
        // üîπ –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        Row(
            modifier = Modifier.align(Alignment.BottomCenter).padding(bottom = 12.dp),
            horizontalArrangement = Arrangement.Center
        ) {
            repeat(images.size) { index ->
                Box(
                    modifier = Modifier
                        .size(if (pagerState.currentPage == index) 10.dp else 8.dp)
                        .background(if (pagerState.currentPage == index) Color.White else Color.Gray, CircleShape)
                        .padding(horizontal = 4.dp)
                )
            }
        }
    }
}

@Composable
fun NewsSection(newsList: List<NewsItem>, navController: NavController) {
    val isVisible = remember { mutableStateOf(true) }

    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.padding(top = 16.dp, start = 16.dp, end = 16.dp)
        ) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Ç—ñ–Ω–Ω—é
            Box(
                modifier = Modifier
                    .shadow(8.dp, shape = RoundedCornerShape(12.dp))
                    .background(Color(0xFFFF5C8D), shape = RoundedCornerShape(12.dp))
                    .padding(horizontal = 24.dp, vertical = 12.dp)
            ) {
                Text("–ü–æ–¥—ñ—ó —à–∫–æ–ª–∏", color = Color.White, fontWeight = FontWeight.Bold)
            }
            Spacer(Modifier.width(8.dp))
            // –†–∏—Å–æ—á–∫–∞
            Box(
                modifier = Modifier
                    .height(6.dp)
                    .weight(1f)
                    .background(Color(0xFF005B9F), shape = RoundedCornerShape(3.dp))
            )
        }

        Spacer(modifier = Modifier.height(12.dp))

        AnimatedVisibility(visible = isVisible.value) {
            NewsHorizontalScroll(newsList, navController)
        }

    }
}



@Composable
fun NewsHorizontalScroll(newsList: List<NewsItem>, navController: NavController) {
        LazyRow(
        contentPadding = PaddingValues(horizontal = 16.dp, vertical = 24.dp),
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        itemsIndexed(newsList) { index, news ->
            NewsCard(news)
        }
    }
}
@Composable
fun NewsCard(news: NewsItem) {
    Column(
        modifier = Modifier
            .width(350.dp)
            .shadow(8.dp, shape = RoundedCornerShape(16.dp))
            .background(Color(0xFF00BCD4), shape = RoundedCornerShape(16.dp))
            .padding(16.dp)
    ) {
        // –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–∑–≤–µ—Ä—Ö—É)
        if (!news.imageUrl.isNullOrEmpty()) {
            Image(
                painter = rememberAsyncImagePainter(news.imageUrl),
                contentDescription = news.title,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(140.dp)
                    .clip(RoundedCornerShape(12.dp)),
                contentScale = ContentScale.Crop
            )
            Spacer(Modifier.height(12.dp))
        }
        Text(news.title, fontWeight = FontWeight.Bold, fontSize = 18.sp, color = Color(0xFF005B9F))
        Spacer(Modifier.height(8.dp))
        Text(news.content, color = Color.White, maxLines = 2, overflow = TextOverflow.Ellipsis)
        Spacer(Modifier.height(16.dp))
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.End,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text("–î–æ–∫–ª–∞–¥–Ω—ñ—à–µ", color = Color(0xFFFF5C8D), fontWeight = FontWeight.Medium)
            Icon(Icons.Default.Info, contentDescription = null, tint = Color(0xFFFF5C8D))
        }
    }
}
@Composable
fun SchoolAdvantagesSection() {
    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.padding(top = 16.dp, start = 16.dp, end = 16.dp)
        ) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Ç—ñ–Ω–Ω—é
            Box(
                modifier = Modifier
                    .shadow(8.dp, shape = RoundedCornerShape(12.dp))
                    .background(Color(0xFFFF5C8D), shape = RoundedCornerShape(12.dp))
                    .padding(horizontal = 24.dp, vertical = 12.dp)
            ) {
                Text("–ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞—à–æ—ó —à–∫–æ–ª–∏", color = Color.White, fontWeight = FontWeight.Bold)
            }
            Spacer(Modifier.width(8.dp))
            // –†–∏—Å–æ—á–∫–∞
            Box(
                modifier = Modifier
                    .height(6.dp)
                    .weight(1f)
                    .background(Color(0xFF005B9F), shape = RoundedCornerShape(3.dp))
            )
        }

        Spacer(modifier = Modifier.height(12.dp))

        val advantages = listOf(
            "–ü–æ—á–∞—Ç–∫–æ–≤–∞, —Å–µ—Ä–µ–¥–Ω—è —ñ —Å—Ç–∞—Ä—à–∞ —à–∫–æ–ª–∞ –≤ –æ–¥–Ω—ñ–π –±—É–¥—ñ–≤–ª—ñ",
            "–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–∏–Ω–∞–º—ñ–∫–∏ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ",
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥—ñ—Ç–µ–π —É –∫–ª–∞—Å–∞—Ö - –¥–æ 15 –æ—Å—ñ–±",
            "–°—É—á–∞—Å–Ω–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–æ-—Ç–µ—Ö–Ω—ñ—á–Ω–∞ –±–∞–∑–∞",
            "–ë—ñ–ª—ñ–Ω–≥–≤–∞–ª—å–Ω–∞ –æ—Å–≤—ñ—Ç–∞",
            "–ë–∞–≥–∞—Ç–æ –ø—Ä–æ—Å—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–≥—É–ª—è–Ω–æ–∫ —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è",
            "–ë—Ä–∏—Ç–∞–Ω—Å—å–∫–∞ —ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ –Ω–∞–≤—á–∞–Ω–Ω—è",
            "–°–º–∞—á–Ω–µ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è",
            "–¶—ñ–∫–∞–≤–µ –ø–æ–∑–∞—à–∫—ñ–ª—å–Ω–µ –∂–∏—Ç—Ç—è",
            "–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫ —ñ–∑ –±–∞—Ç—å–∫–∞–º–∏",
        )
        val colors = listOf(Color(0xFF005B9F), Color(0xFF00BCD4)) // —Å–∏–Ω—ñ–π, –±—ñ—Ä—é–∑–æ–≤–∏–π

        Column(Modifier.padding(16.dp)) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            // (–¥–∏–≤. –±–ª–æ–∫ 1)
            Spacer(Modifier.height(16.dp))
            advantages.forEachIndexed { i, text ->
                AdvantageItem(
                    text = text,
                    number = i + 1,
                    backgroundColor = colors[i % colors.size],
                    modifier = Modifier.padding(vertical = 8.dp)
                )
            }
        }
    }
    FoundersSection()
}

@Composable
fun AdvantageItem(
    text: String,
    number: Int,
    backgroundColor: Color,
    modifier: Modifier = Modifier
) {
    Row(
        modifier = modifier
            .shadow(8.dp, shape = RoundedCornerShape(24.dp))
            .background(backgroundColor, shape = RoundedCornerShape(24.dp))
            .padding(vertical = 12.dp, horizontal = 8.dp)
            .fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically
    ) {
        // –§—ñ–≥—É—Ä–∞ –∑ –Ω–æ–º–µ—Ä–æ–º
        Box(
            modifier = Modifier
                .size(48.dp)
                .background(Color.White, shape = CircleShape)
                .border(2.dp, backgroundColor, shape = CircleShape),
            contentAlignment = Alignment.Center
        ) {
            Text(number.toString(), color = backgroundColor, fontWeight = FontWeight.Bold, fontSize = 22.sp)
        }
        Spacer(Modifier.width(12.dp))
        Text(text, color = Color.White, fontWeight = FontWeight.Medium, fontSize = 16.sp)
    }
}

data class Founder(val name: String, val description: String, val imageUrl: String) // ‚¨Ö –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –ø–æ–ª–µ —ñ—Å–Ω—É—î
@Composable
fun FoundersSection() {
    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.padding(top = 16.dp, start = 16.dp, end = 16.dp)
        ) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —Ç—ñ–Ω–Ω—é
            Box(
                modifier = Modifier
                    .shadow(8.dp, shape = RoundedCornerShape(12.dp))
                    .background(Color(0xFFFF5C8D), shape = RoundedCornerShape(12.dp))
                    .padding(horizontal = 24.dp, vertical = 12.dp)
            ) {
                Text("–ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞—à–æ—ó —à–∫–æ–ª–∏", color = Color.White, fontWeight = FontWeight.Bold)
            }
            Spacer(Modifier.width(8.dp))
            // –†–∏—Å–æ—á–∫–∞
            Box(
                modifier = Modifier
                    .height(6.dp)
                    .weight(1f)
                    .background(Color(0xFF005B9F), shape = RoundedCornerShape(3.dp))
            )
        }

        Spacer(modifier = Modifier.height(12.dp))

        val founders = listOf(
            Founder(
                name = "–ö–æ–≤–∞–ª—å—á—É–∫ –û–ª–µ—Å—è –í–∞–ª–µ—Ä—ñ—ó–≤–Ω–∞",
                description = "–õ—é–±–ª—é –ø–æ–¥–æ—Ä–æ–∂—ñ —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è. –®–∫–æ–ª–∞ –º–∞—î –±—É—Ç–∏ –º—ñ—Å—Ü–µ–º, –¥–µ —É—á–µ–Ω—å –º–æ–∂–µ –≤—ñ–ª—å–Ω–æ –≤–∏—Å–ª–æ–≤–ª—é–≤–∞—Ç–∏ —Å–≤–æ—ó –¥—É–º–∫–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É.",
                imageUrl = "https://push-school.com/wp-content/uploads/2020/08/img_ph_Kovalchuk.png"
            ),
            Founder(
                name = "–Ü–≤–∞–Ω–æ–≤–∞ –ì–∞–Ω–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞",
                description = "–•–æ—á—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ —à–∫–æ–ª—É –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–æ—é –æ—Å–≤—ñ—Ç–æ—é, –¥–µ —î Positive learning atmosphere, Support –≤—ñ–¥ –≤—á–∏—Ç–µ–ª—ñ–≤ —ñ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –±—É—Ç–∏ High achiever!",
                imageUrl = "https://push-school.com/wp-content/uploads/2020/08/img_ph_Ivanova.png"
            ),
            Founder(
                name = "–í–∞—Å–µ–Ω–∫–æ –ê–Ω–Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∞",
                description = "–ù–∞–≤—á–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –∑–æ–Ω—ñ—î—é —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤ –¥—ñ—Ç–µ–π. –ú–∏ –ø—Ä–∞–≥–Ω–µ–º–æ –≥–∞—Ä–º–æ–Ω—ñ–π–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É —Ç–∞ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ –≤ —Å–∏–ª–∞—Ö –¥–ª—è —É—Å–ø—ñ—Ö—É!",
                imageUrl = "https://push-school.com/wp-content/uploads/2020/08/img_ph_Vasenko.png"
            )
        )

        LazyRow(modifier = Modifier.fillMaxWidth()) {
            itemsIndexed(founders) { index,founder -> // ‚¨Ö –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `items(founders)`, –∞ –Ω–µ `items(founders.size)`
                Card(
                    modifier = Modifier.padding(8.dp).width(250.dp),
                    shape = RoundedCornerShape(20.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = Color.Transparent
                    )
                ) {
                    Box(
                        modifier = Modifier
                            .background(
                                Brush.linearGradient(
                                    colors = listOf(Color.Magenta, Color.Cyan)
                                ),
                                shape = RoundedCornerShape(20.dp)
                            )
                            .padding(16.dp)
                            .height(200.dp)
                    ) {
                        Column(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Image(
                                painter = rememberAsyncImagePainter(founder.imageUrl),
                                contentDescription = "–§–æ—Ç–æ ${founder.name}",
                                modifier = Modifier
                                    .size(100.dp)
                                    .clip(CircleShape)
                                    .background(MaterialTheme.colorScheme.primary.copy(alpha = 0.7f))
                            )

                            Spacer(modifier = Modifier.height(8.dp))

                            Text(
                                founder.name,
                                style = MaterialTheme.typography.titleMedium.copy(
                                    shadow = Shadow( // ‚¨Ö –î–æ–¥–∞—î–º–æ —Ç—ñ–Ω—å
                                        color = Color.Black.copy(alpha = 0.5f), // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∞ —Ç—ñ–Ω—å
                                        offset = Offset(4f, 4f), // ‚¨Ö –ó–º—ñ—â–µ–Ω–Ω—è —Ç—ñ–Ω—ñ
                                        blurRadius = 8f // ‚¨Ö –†–æ–∑–º–∏—Ç—Ç—è —Ç—ñ–Ω—ñ
                                    ),
                                    fontWeight = FontWeight.Bold
                                ),
                                textAlign = TextAlign.Center,
                                color = Color.White

                            )
                            Text(founder.description,
                                style = MaterialTheme.typography.bodySmall.copy(
                                    shadow = Shadow( // ‚¨Ö –î–æ–¥–∞—î–º–æ —Ç—ñ–Ω—å
                                        color = Color.Black.copy(alpha = 0.5f), // ‚¨Ö –ù–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∞ —Ç—ñ–Ω—å
                                        offset = Offset(4f, 4f), // ‚¨Ö –ó–º—ñ—â–µ–Ω–Ω—è —Ç—ñ–Ω—ñ
                                        blurRadius = 8f // ‚¨Ö –†–æ–∑–º–∏—Ç—Ç—è —Ç—ñ–Ω—ñ
                                    )
                                ),
                                textAlign = TextAlign.Center,
                                color = Color.White
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun FounderCard(founder: Founder) {
    Column(
        modifier = Modifier
            .width(340.dp)
            .shadow(10.dp, shape = RoundedCornerShape(20.dp))
            .background(Color(0xFF005B9F), shape = RoundedCornerShape(20.dp))
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Image(
            painter = rememberAsyncImagePainter(founder.imageUrl),
            contentDescription = "–§–æ—Ç–æ ${founder.name}",
            modifier = Modifier
                .size(140.dp)
                .clip(RoundedCornerShape(16.dp))
                .shadow(8.dp, RoundedCornerShape(16.dp)),
            contentScale = ContentScale.Crop
        )
        Spacer(Modifier.height(16.dp))
        Text(
            founder.name,
            color = Color.White,
            fontWeight = FontWeight.Bold,
            fontSize = 22.sp,
            textAlign = TextAlign.Center,
            style = LocalTextStyle.current.copy(
                shadow = Shadow(
                    color = Color.Black.copy(alpha = 0.5f),
                    offset = Offset(2f, 2f),
                    blurRadius = 8f
                )
            )
        )
        Spacer(Modifier.height(16.dp))
        Text(
            founder.description,
            color = Color.White,
            fontSize = 15.sp,
            textAlign = TextAlign.Center
        )
    }
}


















