package com.example.push.ui.screens

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.navigation.NavController
import com.example.push.data.ProductItem
import com.example.push.data.RetrofitClient
import kotlinx.coroutines.launch
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.*
import androidx.compose.ui.graphics.*
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.unit.*
import androidx.navigation.compose.*
import coil.compose.rememberAsyncImagePainter
import com.example.push.ui.components.AppHeader
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip


@Composable
fun ShopDetailScreen(productId: Int, navController: NavController) {
    var product by remember { mutableStateOf<ProductItem?>(null) }
    val scope = rememberCoroutineScope()

    LaunchedEffect(productId) {
        scope.launch {
            try {
                val response = RetrofitClient.api.getProducts()
                product = response.products.find { it.id == productId }
            } catch (e: Exception) {
                Log.d("ShopDetailScreen", "Error fetching product: ${e.message}")
            }
        }
    }

    AppHeader(navController, product?.name ?: "–î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É") {
        product?.let { item ->
            Column(
                modifier = Modifier.fillMaxSize().padding(top = 86.dp) // ‚¨Ö –ö–æ—Ä–∏–≥—É—î–º–æ –≤—ñ–¥—Å—Ç—É–ø–∏
            ) {
                Image(
                    painter = rememberAsyncImagePainter(item.imageUrl),
                    contentDescription = null,
                    modifier = Modifier.height(250.dp).fillMaxWidth().clip(RoundedCornerShape(12.dp)) // ‚¨Ö –ó–∞–∫—Ä—É–≥–ª—é—î–º–æ –∫—É—Ç–∏
                )
                Spacer(modifier = Modifier.height(16.dp))

                // üî• –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Ü—ñ–Ω
                Row(
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Column {
                        if (item.discountPrice != null) {
                            Text(
                                "‚Ç¥${item.discountPrice}",
                                style = MaterialTheme.typography.h6,
                                color = Color.Red
                            )
                            Text(
                                "‚Ç¥${item.price}",
                                style = MaterialTheme.typography.body2.copy(textDecoration = TextDecoration.LineThrough),
                                color = Color.Gray
                            ) // ‚¨Ö –ü–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç–∞ —Å—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞
                        } else {
                            Text("‚Ç¥${item.price}", style = MaterialTheme.typography.h6)
                        }
                    }

                    RatingStars(rating = item.rating) // ‚¨Ö –ó—ñ—Ä–æ—á–∫–∏ –∑–∞–º—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                }

                Spacer(modifier = Modifier.height(16.dp))

                // üìñ –û–ø–∏—Å —Ç–æ–≤–∞—Ä—É –∑ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è–º
                Box(modifier = Modifier.fillMaxWidth().weight(1f)) {
                    Text(
                        item.description,
                        style = MaterialTheme.typography.subtitle1,
                        modifier = Modifier.verticalScroll(rememberScrollState()) // ‚¨Ö –î–æ–¥–∞—î–º–æ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è!
                    )
                }

                Spacer(modifier = Modifier.height(16.dp))

                // üîô –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                Button(
                    onClick = { navController.popBackStack() },
                    modifier = Modifier.fillMaxWidth().padding(bottom = 16.dp),
                    colors = ButtonDefaults.buttonColors(
                    backgroundColor = Color(0xFF03736A),  // ‚¨Ö –ó–º—ñ–Ω—é—î–º–æ —Ñ–æ–Ω –∫–Ω–æ–ø–∫–∏
                    contentColor = Color.White   // ‚¨Ö –ó–º—ñ–Ω—é—î–º–æ –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É
                )

                ) {
                    Text("–ù–∞–∑–∞–¥")
                }
            }
        } ?: CircularProgressIndicator(modifier = Modifier.padding(16.dp))
    }
}