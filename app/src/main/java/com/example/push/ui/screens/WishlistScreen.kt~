package com.example.push.ui.screens

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import coil.compose.rememberAsyncImagePainter
import com.example.push.data.RetrofitClient
import com.example.push.data.WishlistCategory
import com.example.push.navigation.Screen
import com.example.push.ui.components.AppHeader
import kotlinx.coroutines.launch
import androidx.compose.foundation.verticalScroll
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush

@Composable
fun WishlistScreen(navController: NavController) {
    val categories = remember { mutableStateOf(emptyList<WishlistCategory>()) }
    val scope = rememberCoroutineScope()
    val gradientColors = listOf(
        Color(0xFFFF4081),  // Pink
        Color(0xFF1E0F4F)   // Dark Purple
    )
    LaunchedEffect(Unit) {
        scope.launch {
            try {
                val response = RetrofitClient.api.getWishlistCategories()
                if (response.status == "success") {
                    categories.value = response.data!!
                }
            } catch (e: Exception) {
                Log.d("WishlistScreen", "Помилка завантаження категорій: ${e.message}")
            }
        }
    }

    AppHeader(navController, "Скарбничка побажань") {
        Column(modifier = Modifier.fillMaxSize()
            .padding(top = 96.dp, start = 0.dp, end = 0.dp, bottom = 60.dp)
            .background(
                Brush.linearGradient(
                    colors = gradientColors,
                    start = androidx.compose.ui.geometry.Offset(
                        Float.POSITIVE_INFINITY,
                        Float.POSITIVE_INFINITY
                    ), // bottom-right
                    end = androidx.compose.ui.geometry.Offset(0f, 0f) // top-left
                )
            )
        )

        {

            LazyColumn {
                itemsIndexed(categories.value) { index, category ->
                    WishlistCategoryItem(category) {
                        navController.navigate(Screen.WishlistCategory.createRoute(category.id))
                    }
                }
            }
        }
    }
}

@Composable
fun WishlistCategoryItem(category: WishlistCategory, onClick: () -> Unit) {
    Card(
        modifier = Modifier.fillMaxWidth().padding(8.dp, top = 20.dp).clickable { onClick() },
        elevation = CardDefaults.elevatedCardElevation(4.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White.copy(alpha = 0.7f)) // ✅ Робимо фон трохи прозорим
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Image(
                painter = rememberAsyncImagePainter(category.imageUrl),
                contentDescription = null,
                modifier = Modifier.height(180.dp).fillMaxWidth()
            )
            Text(
                text = category.name,
                style = MaterialTheme.typography.titleMedium,
                textAlign = TextAlign.Center,
                color = Color.White,
                modifier = Modifier
                    .padding(top = 8.dp, bottom = 8.dp)
                    .background(
                        Color(0xFFFF4081), // ✅ Напівпрозорий фон
                        shape = RoundedCornerShape(12.dp) // ✅ Закруглені кути
                    )
                     .shadow(6.dp) // ✅ Додаємо тінь
                    //  .shadow(6.dp, shape = RoundedCornerShape(12.dp)) // ✅ Додаємо тінь
                    .padding(horizontal = 12.dp, vertical = 6.dp) // ✅ Збільшуємо внутрішні відступи
            )
        }
    }
}