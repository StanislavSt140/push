package com.example.push.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.*
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.push.data.RetrofitClient
import com.example.push.data.UserPreferences
import com.example.push.navigation.Screen
import kotlinx.coroutines.launch

@Composable
fun LoginScreen(navController: NavController) {
    var code by remember { mutableStateOf("") }
    var message by remember { mutableStateOf("") }
    var userName by remember { mutableStateOf("") }
    var userRole by remember { mutableStateOf("") }
    var userClass by remember { mutableStateOf("") }
    val scope = rememberCoroutineScope()

    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É", style = MaterialTheme.typography.headlineLarge)
        Spacer(modifier = Modifier.height(16.dp))

        OutlinedTextField(
            value = code,
            onValueChange = { code = it },
            label = { Text("–ö–æ–¥") }
        )

        Spacer(modifier = Modifier.height(16.dp))

        val userPrefs = UserPreferences(LocalContext.current)

        Button(onClick = {
            scope.launch {
                val response = RetrofitClient.api.verifyCode(code)
                message = response.message
                if (response.status == "success") {
                    
                    userPrefs.saveUser(response.user_id!!, response.name!!, response.role!!, response.className)

                    navController.navigate(Screen.Home.route) // ‚¨Ö –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
                }
            }
        }) {
            Text("–£–≤—ñ–π—Ç–∏")
        }

        if (message.isNotEmpty()) {
            Spacer(modifier = Modifier.height(16.dp))
            Text(text = message)

            if (message == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!") {
                Text(text = "üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: $userName")
                Text(text = "üé≠ –†–æ–ª—å: $userRole")
            }
        }
    }
}